---
layout: boilerplate.njk
tags: ['course', 'frontend']
type: prompt
date: 1970-01-01
title: Your first template
excerpt: 
---

https://mozilla.github.io/nunjucks/templating.html#macro
 
{% import "_includes/macro.njk" as m %}
<main>
       {{ m.header( title ) }}    
        
        <article>
            <section>
            <h2>Templates</h2>
            <p>As you add more pages to your website, you will soon notice that many elements are repeated across pages, like the header tags.
            Manually rewriting them every time you make a new page can become quite tedious - this is where templates come in.</p>

            <p>This is done by using yet another programming language called 'templating languages'. Recall that you used the following 
            code in an earlier course:</p>

<code>
              <pre>
---
layout: default.njk
---
I am a plaintext
                </pre> 
</code>
            <p>The '---' and the text in bwteen them is actually part of a templating language called Liquid. 11ty supports Liquid out of the box, and is thus frequenrtly used. 
            We will use Liquid templates so we don't have to write the head, body, title, and meta tags every time we make a new page. First, read the following tutorial.</p>

            <div class="links">
            {{ m.link("https://www.11ty.dev/docs/layouts/",              "11ty.dev",    "Layouts | Eleventy, a simpler static site generator" ) }}
            </div>

            <p>Use this tutorial to move all of your head, html, body, etc. tags in your index.html into default.njk. This means your index.html should only have the texts and images, and 
            not contain any head or meta tags. In addition, tweak default.njk so you can specify the title (in the title tag) in index.html. In other words, 
            the first 4 lines of index.html should look like this:</p>

<code>
              <pre>
---
layout: default.njk
title: Your Title
---
                </pre> 
</code>

            <p>Notice that in the tutorial, 'title' is defined in both mylayout.njk (the template) and content-using-layout.md(main page). 
            In such case, the title defined in the main page will be used. If you forget to deinfe the title in the main page, the title in the template will be used.
            This is a recommended practice, since even if you forget to define a title, the outputted website will at least how something instead of a blank title. </p>
            </section>

            <section>
            <h2>Macros</h2>
            <p>Macros are commonly used when you want to repeat certain group of elements over and over. 
            For exmaple, if you are making a directory webpage that lists the image, name, and a short bio for bunch of people, 
            instead of writing the img, header, and p tags for every one of them, it would be easier if all you needed to write were the info for each person, and the template will generate the tags for you.</p>

            <p>Liquid unfortunately does not support macros, so we use another templating language called Nunjucks.</p>

            <p>First, read the Nunjucks documentation about macros here:</p>
            <div class="links">
            {{ m.link("https://mozilla.github.io/nunjucks/templating.html#macro",              "mozilla.github.io",    "Nunjucks" ) }}
            </div>

            <p>Now, chnage the filename of your index from index.html into index.njk. This will explicitly tell 11ty that this file contains Nunjucks code. Add a macro 
            that can take name of a skill you have (e.g. Illustrator, Figma) and a short discription of it, and output it in the following format:</p>

            <ul>
                <li>The name of your skill is in the h3 tag</li>
                <li>The description is in a p tag</li>
                <li>The above 2 is in a div tag</li>
            </ul>

            <p>Use the macro you just made to list out 3 ~ 4 skills you have. In other words, in your index.njk file, you should be able to write something like:</p>
<code>
              <pre>
{% raw %} {{ skill('Photoshop', 'I can use Ps') }}  {% endraw %}
{% raw %} {{ skill('Figma', 'I can use Figma') }}  {% endraw %}
</pre> 
</code>

            <p>and the generated html file after running 11ty should look something like:</p>
<code>
              <pre>
&lt;div&gt;&lt;h3&gt;Photoshop&lt;/h3&gt;&lt;p&gt;I can use Ps&lt;/p&gt;&lt;/div&gt;
&lt;div&gt;&lt;h3&gt;Figma&lt;/h3&gt;&lt;p&gt;I can use Figma&lt;/p&gt;&lt;/div&gt;
</pre> 
</code>

            </section>

        </article>

    <footer>
    </footer>

</main>